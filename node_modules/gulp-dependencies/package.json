{
  "_args": [
    [
      {
        "raw": "gulp-dependencies",
        "scope": null,
        "escapedName": "gulp-dependencies",
        "name": "gulp-dependencies",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\Projects\\Slider"
    ]
  ],
  "_from": "gulp-dependencies@latest",
  "_id": "gulp-dependencies@0.1.1",
  "_inCache": true,
  "_location": "/gulp-dependencies",
  "_nodeVersion": "0.10.33",
  "_npmUser": {
    "name": "gwaredd",
    "email": "gwaredd@hotmail.com"
  },
  "_npmVersion": "2.7.0",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3",
    "isarray": "0.0.1",
    "string_decoder": "0.10.31",
    "xtend": "4.0.1"
  },
  "_requested": {
    "raw": "gulp-dependencies",
    "scope": null,
    "escapedName": "gulp-dependencies",
    "name": "gulp-dependencies",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-dependencies/-/gulp-dependencies-0.1.1.tgz",
  "_shasum": "6a7d8155a07e45b21c9fe00438391895d3ea452e",
  "_shrinkwrap": null,
  "_spec": "gulp-dependencies",
  "_where": "D:\\Projects\\Slider",
  "author": {
    "name": "Gwaredd Mountain"
  },
  "bugs": {
    "url": "https://github.com/gwaredd/gulp-dependencies/issues"
  },
  "dependencies": {
    "gulp-util": "^3.0.4",
    "lodash": "^3.5.0",
    "through2": "^0.6.3"
  },
  "description": "A gulp plugin for handling dependencies between files",
  "devDependencies": {
    "chai": "^2.1.1",
    "coffee-script": "^1.9.1",
    "gulp": "^3.8.11",
    "gulp-clean": "^0.3.1",
    "gulp-coffee": "^2.3.1",
    "gulp-mocha": "^2.0.0",
    "mocha": "^2.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "6a7d8155a07e45b21c9fe00438391895d3ea452e",
    "tarball": "https://registry.npmjs.org/gulp-dependencies/-/gulp-dependencies-0.1.1.tgz"
  },
  "gitHead": "4c1dcab2a621131f7d39c08db1db8bd556a531a0",
  "homepage": "https://github.com/gwaredd/gulp-dependencies#readme",
  "keywords": [
    "gulp",
    "gulpplugin",
    "changed",
    "newer",
    "modified",
    "modification",
    "updated",
    "time",
    "mtime",
    "stat",
    "dependencies"
  ],
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "gwaredd",
      "email": "gwaredd@hotmail.com"
    }
  ],
  "name": "gulp-dependencies",
  "optionalDependencies": {},
  "readme": "# gulp-dependencies\r\n\r\n> A gulp plugin for handling dependencies between files\r\n\r\nScans files in the stream and keeps a map of which files are included by others. Then works out which files needs to be rebuilt taking this into account. Kind of like a more involved version of gulp-changed. Useful when watching files.\r\n\r\nCan also be used for other things!\r\n\r\n### **Install**\r\n```\r\n$ npm install --save-dev gulp-dependencies\r\n```\r\n\r\n### **Usage**\r\n```\r\nvar dependencies = require('gulp-dependencies');\r\n...\r\n.pipe dependencies( [ options ] )\r\n```\r\n**javascript**\r\n```js\r\nvar gulp = require('gulp');\r\nvar sass = require(\"gulp-sass\");\r\nvar dependencies = require('gulp-dependencies');\r\n\r\ngulp.task('watch', function() {\r\n  return gulp.watch(\"*.scss\", [ 'build' ]);\r\n});\r\n\r\ngulp.task('build', function() {\r\n\r\n  return gulp.src(\"*.scss\")\r\n\r\n    // work out which files need rebuilding\r\n\r\n    .pipe(dependencies({\r\n\r\n      // extract 'imports' and append '.scss'\r\n      match  : /@import\\s+'(.+)'/g,\r\n      replace: function(f) { return f + \".scss\"; },\r\n\r\n      // destination and extension for output files\r\n      dest   : \"css\",\r\n      ext    : \".css\"\r\n    }))\r\n\r\n  // files are now filtered so build them\r\n\r\n  .pipe(sass())\r\n  .pipe(gulp.dest(\"css\"));\r\n\r\n});\r\n```\r\n**coffeescript**\r\n\r\n```coffeescript\r\ngulp            = require 'gulp'\r\nsass            = require \"gulp-sass\"\r\ndependencies    = require 'gulp-dependencies'\r\n\r\ngulp.task 'watch', -> gulp.watch \"*.scss\", [ 'build' ]\r\n\r\ngulp.task 'build', ->\r\n\r\n  gulp.src \"*.scss\"\r\n\r\n    # work out which files need rebuilding\r\n    .pipe dependencies\r\n\r\n      # extract 'imports' and append '.scss'\r\n      match     : /@import\\s+'(.+)'/g\r\n      replace   : (f) -> \"#{f}.scss\"\r\n\r\n      # destination and extension for output files\r\n      dest      : \"css\"\r\n      ext       : \".css\"\r\n\r\n    # files are now filtered so build them\r\n    .pipe sass()\r\n    .pipe gulp.dest \"css\"\r\n```\r\n\r\n### **Caveats**\r\n\r\nFiles need to have been processed at least once before they are included in the dependency map.\r\n\r\nThis is work in progress :)\r\n\r\n### **Options**\r\n\r\nLots off (too many?) options ...\r\n\r\n#### Basic options\r\n- *match [ regex ]*\r\n\r\n  A javascript regular expression used to extract included files. The first capture group is used to extract the filename\r\n\r\n  ```\r\n  /@require\\s+(.+)\\b/g\r\n  ```\r\n\r\n- *replace [ function : optional, default null ]*\r\n\r\n   If exists, can be used to further process the captured string. For example, add file extensions where they are inferred by the file format.\r\n\r\n   ```\r\n   function(f) { return f + \".scss\"; }\r\n   ```\r\n\r\n- *dest [ string or function ]*\r\n\r\n   The destination directory for the output files. This is used to compare source and target file modification times to see if they need rebuilding. In function form, the current file is passed in and expects the directory as a string in return.\r\n\r\n   ```\r\n   function(f) { return \"output/dir\"; }\r\n   ```\r\n\r\n- *ext [ string or function ]*\r\n\r\n   The destination file extension for the output files. This is used to compare source and target file modification times to see if they need rebuilding. In function form, the current file is passed in and expects the file extension as a string in return.\r\n\r\n   ```\r\n   function(f) { return \".ext\"; }\r\n   ```\r\n\r\n#### Directories\r\n- *dependencies_file [ string : default './dependencies.json' ]*\r\n\r\n   Dependencies are stored in a json file, by default in the current working directory. You can override this if required.\r\n\r\n- *basepath [ string : default 'current working directory' ]*\r\n\r\n   Dependencies are stored relative to a base directory. By default this is the current working directory, however you can override this. If you want to store absolute paths you can use '/' as the base path.\r\n\r\n#### Custom Control\r\n- *override [ object ]*\r\n\r\n   You can provide custom handling for given file types. For any given extension, you can specify custom match and replace options, which will override the default values.\r\n\r\n Additionally you can add a \"remove\" property that will remove files of that type from the stream. Useful in the case of required files that don't in themselves produce an output file (such as ruby files included by haml files, header files in C++ etc).\r\n\r\n   ```\r\n   override:\r\n   {\r\n      \".h\":\r\n      {\r\n        match: /#include\\s+\"(.+)\"/g,\r\n        replace: null,\r\n        remove: true\r\n      }\r\n   }\r\n   ```\r\n\r\n- *insert_dependents [ bool : default true ]*\r\n\r\n   Dependent files will be added to the stream if required (because an included file has changed). This is normally only necessary if also using with another plugin such as gulp-changed that has previously filtered the file list.\r\n\r\n- *insert_included [ bool : default false ]*\r\n\r\n   Add included files into the file stream. For example, if you wanted to concatenate them all together - e.g. with gulp-concat.\r\n\r\n- *order_dependencies [ bool : default true ]*\r\n\r\n   By default the files will be ordered such that \"parent\" files are before \"children\". If the order of the files in the stream is important, this can be turned off - any additional files added will be at the end of the stream.\r\n\r\n- *recursive [ bool : default true ]*\r\n\r\n   By default the plugin recursively searches all included files to update the dependency map. This can be turned off. However, note that adding 'insert_included' implies recursion.\r\n\r\n#### Advanced\r\n- *clean [ bool : default false ]*\r\n\r\n   If true the plugin will create a 'fresh' version of the dependency map and forget any previous values.\r\n\r\n- *save [ bool : default true ]*\r\n\r\n   If false the dependency map will not be saved\r\n\r\n- *debug [ bool : default false ]*\r\n\r\n   Turns on debug ouput\r\n\r\n- *update [ bool : default true ]*\r\n\r\n   If false, files will not be scanned for updated dependencies\r\n\r\n- *error : [ function ]*\r\n\r\n   Override the default error handling, e.g.\r\n\r\n   ```\r\n   function(message) { throw message; }\r\n   ```\r\n\r\n- *warn : [ function ]*\r\n\r\n   Override the default warning (non-fatal error) handler, e.g.\r\n\r\n   ```\r\n   function(message) { throw message; }\r\n   ```\r\n\r\n- *print : [ function ]*\r\n\r\n   Override the debug output handler (when debug option is set to true).\r\n\r\n   ```\r\n   function(message) { console.log( message ); }\r\n   ```\r\n\r\n- *xfs: [ object ]*\r\n\r\n   Override the file I/O. The plugin requires three file I/O functions, which can be redirected if required (for example, using a mock interface for the test suite). Default implementation below.\r\n\r\n   ```\r\n   xfs: {\r\n         read: function(path) { return fs.readFileSync(path); },\r\n         write: function(path, data) { return fs.writeFileSync(path, data); },\r\n         modified: function(path) { return fs.statSync(path).mtime; }\r\n   }\r\n   ```\r\n\r\n### Examples\r\n- See examples folder\r\n\r\n### TODO\r\n\r\n - Add support for file globs, so it is easier to include multiple files in one go\r\n\r\n### Release History\r\n\r\n* 0.1.0 First version\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gwaredd/gulp-dependencies.git"
  },
  "scripts": {
    "test": "gulp test"
  },
  "version": "0.1.1"
}
